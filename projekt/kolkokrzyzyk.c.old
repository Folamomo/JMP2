#include <ncurses.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int pole[3][3];
int gamemode = 0;
int diff = 1; // 0=random, 1=basic,  3=impossible
int p1symbol = 'X', p2symbol = 'O';
int p1score = 0, p2score = 0;
int c;
int doilu = 10;
int startsfirst;
void P1mov() {
  int warunek = 1;
  while (warunek) {
    c = getch();
    if (c == 'q') {
      if (pole[0][0] == 0) {
        pole[0][0] = 1;
        warunek = 0;
      }
    } else if (c == 'w') {
      if (pole[0][1] == 0) {
        pole[0][1] = 1;
        warunek = 0;
      }
    } else if (c == 'e') {
      if (pole[0][2] == 0) {
        pole[0][2] = 1;
        warunek = 0;
      }
    } else if (c == 'a') {
      if (pole[1][0] == 0) {
        pole[1][0] = 1;
        warunek = 0;
      }
    } else if (c == 's') {
      if (pole[1][1] == 0) {
        pole[1][1] = 1;
        warunek = 0;
      }
    } else if (c == 'd') {
      if (pole[1][2] == 0) {
        pole[1][2] = 1;
        warunek = 0;
      }
    } else if (c == 'z') {
      if (pole[2][0] == 0) {
        pole[2][0] = 1;
        warunek = 0;
      }
    } else if (c == 'x') {
      if (pole[2][1] == 0) {
        pole[2][1] = 1;
        warunek = 0;
      }
    } else if (c == 'c') {
      if (pole[2][2] == 0) {
        pole[2][2] = 1;
        warunek = 0;
      }
    }
  }
}

void P2mov() {
  int warunek = 1;
  while (warunek) {
    c = getch();
    if (c == 'u') {
      if (pole[0][0] == 0) {
        pole[0][0] = 2;
        warunek = 0;
      }
    } else if (c == 'i') {
      if (pole[0][1] == 0) {
        pole[0][1] = 2;
        warunek = 0;
      }
    } else if (c == 'o') {
      if (pole[0][2] == 0) {
        pole[0][2] = 2;
        warunek = 0;
      }
    } else if (c == 'j') {
      if (pole[1][0] == 0) {
        pole[1][0] = 2;
        warunek = 0;
      }
    } else if (c == 'k') {
      if (pole[1][1] == 0) {
        pole[1][1] = 2;
        warunek = 0;
      }
    } else if (c == 'l') {
      if (pole[1][2] == 0) {
        pole[1][2] = 2;
        warunek = 0;
      }
    } else if (c == 'm') {
      if (pole[2][0] == 0) {
        pole[2][0] = 2;
        warunek = 0;
      }
    } else if (c == ',') {
      if (pole[2][1] == 0) {
        pole[2][1] = 2;
        warunek = 0;
      }
    } else if (c == '.') {
      if (pole[2][2] == 0) {
        pole[2][2] = 2;
        warunek = 0;
      }
    }
  }
}

int wincheck() // Check for win, 0=none, 1=P1, 2=P2
{
  for (int i = 0; i < 3; i++) {
    if (pole[0][i] != 0) {
      if (pole[0][i] == pole[1][i] && pole[0][i] == pole[2][i]) {
        return pole[0][i];
      }
    }
    if (pole[i][0] != 0) {
      if (pole[i][0] == pole[i][1] && pole[i][0] == pole[i][2]) {
        return pole[i][0];
      }
    }
  }
  if (pole[1][1] != 0) {
    if (pole[0][0] == pole[1][1] && pole[1][1] == pole[2][2]) {
      return pole[1][1];
    }
    if (pole[2][0] == pole[1][1] && pole[1][1] == pole[0][2]) {
      return pole[1][1];
    }
  }
  return 0;
}

void czyscplansze() {
  for (int y = 0; y < 3; y++) {
    for (int x = 0; x < 3; x++) {
      pole[y][x] = 0;
    }
  }
}
void rysuj() {
  clear();
  for (int y = 0; y < 3; y++) {
    for (int x = 0; x < 3; x++) {
      if (pole[y][x] == 0) {
        printw(" ");
      } else if (pole[y][x] == 1) {
        printw("%c", p1symbol);
      } else if (pole[y][x] == 2) {
        printw("%c", p2symbol);
      } else
        printw("%d", pole[y][x]); //   usunąć
      if (x < 2) {
        printw("|");
      } else {
        printw("\n");
      }
    }
  }
  printw("\n\
Gracz 1   Gracz 2 \n\
  %d         %d",
         p1score, p2score);
}

void ai0() // gra losowe pole
{
  int a = -1;
  int x, y;
  while (a != 0) {
    y = rand() % 3;
    x = rand() % 3;
    a = pole[y][x];
  }
  pole[y][x] = 2;
}

void ai1() // próbuje wygrać, próbuje bronić, potem losowo
{
  for (int y = 0; y < 3; y++) {
    for (int x = 0; x < 3; x++) {
      if (pole[y][x] == 0) // dla każdego pustego pola
      {
        if (pole[(y + 1) % 3][x] == 2 &&
            pole[(y + 2) % 3][x] == 2) // spróbuj wygrać kolumnę
        {
          pole[y][x] = 2;
          return;
        }

        if (pole[y][(x + 1) % 3] == 2 &&
            pole[y][(x + 2) % 3] == 2) // spróbuj wygrać wiersz
        {
          pole[y][x] = 2;
          return;
        }

        if (x == y) //==leży na przekątnej prawoskosnej
        {
          if (pole[(y + 1) % 3][(x + 1) % 3] == 2 &&
              pole[(y + 2) % 3][(x + 2) % 3] == 2) {
            pole[y][x] = 2;
            return;
          }
        }
        if (y == 2 - x) // druga przekątna
        {

          if (pole[(y + 1) % 3][(x + 2) % 3] == 2 &&
              pole[(y + 2) % 3][(x + 1) % 3] == 2) {
            pole[y][x] = 2;
            return;
          }
        }
      }
    }
  }

  for (int y = 0; y < 3; y++) {
    for (int x = 0; x < 3; x++) {
      if (pole[y][x] == 0) // dla każdego pustego pola
      {
        if (pole[(y + 1) % 3][x] == 1 &&
            pole[(y + 2) % 3][x] == 1) // spróbuj bronic kolumnę
        {
          pole[y][x] = 2;
          return;
        }

        if (pole[y][(x + 1) % 3] == 1 &&
            pole[y][(x + 2) % 3] == 1) // spróbuj bronic wiersz
        {
          pole[y][x] = 2;
          return;
        }

        if (y == x) //==leży na przekątnej prawoskosnej
        {
          if (pole[(y + 1) % 3][(x + 1) % 3] == 1 &&
              pole[(y + 2) % 3][(x + 2) % 3] == 1) {
            pole[y][x] = 2;
            return;
          }
        }

        if (y == 2 - x) // druga przekątna
        {
          if (pole[(y + 1) % 3][(x + 2) % 3] == 1 &&
              pole[(y + 2) % 3][(x + 1) % 3] == 1) {
            pole[y][x] = 2;
            return;
          }
        }
      }
    }
  }
  if (pole[1][1] == 0) {
    pole[1][1] = 2;
    return;
  }
  ai0();
}
void ai() {
  if (diff == 0) // losowo
  {
    ai0();
  } else if (diff == 1) {
    ai1();
  }
}
void gra() {
  int movnr = 0;
  rysuj();
  while (wincheck() == 0 && movnr < 9) {
    if ((movnr + startsfirst) % 2 == 0) {
      P1mov();
    } else {
      if (gamemode == 2) {
        ai();
      } else {
        P2mov();
      }
    }
    rysuj();
    movnr++;
  }
  movnr = 0;
  if (wincheck() == 1) {
    startsfirst = 1;
    p1score++;
  } else if (wincheck() == 2) {
    startsfirst = 0;
    p2score++;
  } else {
    startsfirst = 1 - startsfirst;
  }
  czyscplansze();
  getch();
}

int menu() {
  clear();
  printw("1. Nowa gra \n2. Najlepsze wyniki \n3. Opcje \n4. Sterowanie \n5. "
         "Wyjscie \n");
  c = getch();
  clear();
  if (c == '1') {
    printw("1. Tryb klasyczny \n2. Tryb czasowy  \n3.Zagraj z komputerem \n");
    gamemode = -1;
    while (gamemode < 0 || gamemode > 2) {
      c = getch();
      gamemode = c - '1';
    }
    startsfirst = 0; // 0=P1 starts, 1=P2starts
    while (p1score < doilu && p2score < doilu) {
      gra();
    }
    p1score = 0;
    p2score = 0;
    return 1;
  } else if (c == '2') {
    printw("Tu wstaw najlepsze wyniki \n");
    printw("dowolny klawisz by wrocic \n");
    getch();
    return 1;
  } else if (c == '3') {
    printw("Tu wstaw opcje\n");
    printw("dowolny klawisz by wrocic");
    getch();
    return 1;
  } else if (c == '4') {
    printw("\
Gracz 1:	Gracz 2:\n\
 q|w|e		 u|i|p\n\
 a|s|d		 j|k|l\n\
 z|x|c		 m|,|.\n\
 dowolny klawisz aby wyjsc");
    getch();
    return 1;
  } else if (c == '5') {
    return 0;
  } else
    return 1;
}
int main() {
  initscr();
  noecho();
  cbreak();
  time_t tt;
  int seed = time(&tt);
  srand(seed);
  while (menu()) {
  }
  endwin();
  return 0;
}
